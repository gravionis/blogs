<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/content/posts/system_design/youtube.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/content/posts/system_design/youtube.md" />
              <option name="originalContent" value="+++&#10;date = '2025-05-03T12:44:47+10:00'&#10;draft = false&#10;title = 'Youtube System Design Interview'&#10;tags = ['Youtube', 'Interview']&#10;+++&#10;## 1. Requirements Gathering&#10;&#10;### Functional Requirements&#10;- **Video Upload**: Users can upload videos (multiple formats, sizes up to 10GB)&#10;- **Video Streaming**: Users can watch videos with adaptive bitrate streaming&#10;- **Video Search**: Search videos by title, description, tags, channel&#10;- **User Management**: Registration, authentication, profiles, subscriptions&#10;- **Social Features**: Comments, likes/dislikes, sharing, playlists&#10;- **Channel Management**: Create channels, manage content, analytics&#10;- **Content Moderation**: Automated and manual content review&#10;- **Notifications**: Subscription updates, comment replies, trending content&#10;&#10;### Non-Functional Requirements&#10;- **Scale**: 2B+ users, 500+ hours uploaded per minute, 1B+ hours watched daily&#10;- **Availability**: 99.9% uptime (CAP Theorem - prioritize Availability and Partition tolerance)&#10;- **Latency**: &#10;  - Video start time: &lt;2 seconds globally&#10;  - Search results: &lt;300ms&#10;  - Upload processing: Variable based on video size&#10;- **Consistency**: Eventually consistent for social features, strong consistency for user auth&#10;- **Storage**: Exabyte-scale video storage with global distribution&#10;- **Bandwidth**: Petabyte-scale daily traffic&#10;&#10;### Scale Estimation&#10;- **Users**: 2.7B monthly active users&#10;- **Videos**: 720,000 hours uploaded daily&#10;- **Storage**: 1PB+ new content daily&#10;- **Bandwidth**: 30PB+ daily egress traffic&#10;- **QPS**: 1M+ concurrent video streams&#10;&#10;## 2. High-Level Architecture&#10;&#10;```&#10;[CDN Layer] → [Load Balancers] → [API Gateway] → [Microservices]&#10;                                                      ↓&#10;[Message Queue] ← [Video Processing Pipeline] ← [Object Storage]&#10;                                                      ↓&#10;[Search Engine] ← [Metadata Services] → [Analytics Pipeline]&#10;```&#10;&#10;### Core Components&#10;1. **API Gateway** - Request routing, authentication, rate limiting&#10;2. **Video Upload Service** - Handle video ingestion and initial processing&#10;3. **Video Processing Pipeline** - Transcoding, thumbnail generation, ML analysis&#10;4. **Video Streaming Service** - Adaptive bitrate delivery&#10;5. **Metadata Service** - Video information, user data, social interactions&#10;6. **Search Service** - Video discovery and recommendation&#10;7. **User Service** - Authentication, profiles, subscriptions&#10;8. **Analytics Service** - View tracking, performance metrics&#10;9. **Notification Service** - Real-time updates and alerts&#10;&#10;## 2a. Microservice Decomposition &amp; Hexagonal Architecture (Chris Richardson)&#10;&#10;### Decomposition Strategies (from &quot;Microservices Patterns&quot;)&#10;- **By Business Capability**: Decompose services around business domains (e.g., Video Management, User Management, Social Interactions, Analytics).&#10;- **By Subdomain (DDD)**: Identify core, supporting, and generic subdomains (e.g., Video Processing as core, Notification as supporting).&#10;- **By Transaction Boundary**: Services should own their data and transactional boundaries (e.g., Video Upload and Processing as separate services).&#10;- **By Team Ownership**: Align services with team boundaries for independent delivery.&#10;&#10;### Hexagonal Architecture (Ports &amp; Adapters)&#10;- **Service Core**: Business logic is isolated from external systems.&#10;- **Ports**: Define interfaces for driving (API, UI) and driven (DB, messaging, external APIs) adapters.&#10;- **Adapters**: Implement ports for REST, gRPC, Kafka, databases, etc.&#10;- **Benefits**: Improves testability, flexibility, and separation of concerns.&#10;&#10;#### Example: Video Upload Service (Hexagonal)&#10;- **Core**: Handles upload validation, metadata extraction, and orchestration.&#10;- **Inbound Adapter**: REST API for receiving uploads.&#10;- **Outbound Adapters**: Kafka producer for events, S3 adapter for storage, DB adapter for metadata.&#10;&#10;### Additional Patterns from the Book&#10;- **API Composition**: Aggregate data from multiple services for UI.&#10;- **Database per Service**: Each service owns its schema.&#10;- **Saga Pattern**: Manage distributed transactions (e.g., video upload workflow).&#10;- **CQRS**: Separate read/write models for scalability.&#10;- **Event Sourcing**: Persist state changes as events for auditability.&#10;&#10;### References&#10;- Chris Richardson, &quot;Microservices Patterns&quot; (Manning)&#10;- https://microservices.io&#10;&#10;## 3. Scale Cube Application for 10x Growth&#10;&#10;### X-Axis Scaling (Horizontal Duplication)&#10;- **Load Balancers**: Deploy multiple tiers (L4/L7) with auto-scaling&#10;- **API Gateway Clusters**: Regional deployment with intelligent routing&#10;- **Microservice Replicas**: Auto-scaling based on CPU, memory, and queue depth&#10;- **Database Read Replicas**: Multiple read-only instances per region&#10;&#10;### Y-Axis Scaling (Functional Decomposition)&#10;- **Service Decomposition**:&#10;  - Upload Service → Video Ingestion + Metadata Extraction + Storage&#10;  - User Service → Auth + Profile + Subscription + Preferences&#10;  - Social Service → Comments + Likes + Sharing + Community&#10;- **Database Decomposition**: Separate DBs for videos, users, analytics, social&#10;- **Event-Driven Architecture**: Loose coupling via message queues&#10;&#10;### Z-Axis Scaling (Data Partitioning)&#10;- **Video Sharding**: By video ID hash, geographic region, or creator&#10;- **User Sharding**: By user ID hash or geographic region&#10;- **Temporal Sharding**: Hot data (recent) vs cold data (archived)&#10;- **Content-Based Sharding**: By video category, language, or popularity&#10;&#10;## 4. Microservices Design Patterns&#10;&#10;### Service Patterns&#10;- **API Gateway Pattern**: Single entry point with cross-cutting concerns&#10;- **Service Registry &amp; Discovery**: Consul/Eureka for service location&#10;- **Circuit Breaker**: Hystrix for fault tolerance and cascading failure prevention&#10;- **Bulkhead**: Resource isolation between services&#10;- **Retry with Exponential Backoff**: Resilient inter-service communication&#10;&#10;### Data Patterns&#10;- **Database per Service**: Each microservice owns its data&#10;- **Saga Pattern**: Distributed transactions for video upload workflow&#10;- **CQRS**: Separate read/write models for video metadata and analytics&#10;- **Event Sourcing**: Audit trail for user actions and video lifecycle&#10;&#10;### Communication Patterns&#10;- **Asynchronous Messaging**: Kafka for video processing pipeline&#10;- **Request-Response**: HTTP/gRPC for real-time user interactions&#10;- **Publish-Subscribe**: Event notifications for subscriptions&#10;- **Message Routing**: Content-based routing for different video types&#10;&#10;- **Hexagonal Architecture**: Each service is designed using ports and adapters, isolating business logic from infrastructure.&#10;- **Decomposition by Business Capability**: Services are split by domain, following DDD and team boundaries.&#10;- **Saga Pattern**: Used for workflows like video upload and processing.&#10;- **CQRS &amp; Event Sourcing**: Applied for scalability and auditability.&#10;&#10;## 5. Event-Driven Architecture (EDA)&#10;&#10;### Event Streaming Platform&#10;```&#10;Video Upload → [Event Producer] → [Kafka Topics] → [Event Consumers] → Processing Services&#10;```&#10;&#10;### Core Events&#10;- **VideoUploadedEvent**: Triggers transcoding pipeline&#10;- **VideoProcessedEvent**: Updates metadata and makes video available&#10;- **UserActionEvent**: Likes, comments, views for recommendation engine&#10;- **SubscriptionEvent**: Channel subscription/unsubscription&#10;- **ModerationEvent**: Content review results&#10;&#10;### Event Patterns&#10;- **Event Sourcing**: Store all state changes as events&#10;- **CQRS**: Separate command and query responsibility&#10;- **Event Choreography**: Services react to events autonomously&#10;- **Event Orchestration**: Central coordinator for complex workflows&#10;&#10;## 6. CAP Theorem Considerations&#10;&#10;### Design Decisions&#10;- **Partition Tolerance**: Always required in distributed system&#10;- **Availability vs Consistency Trade-offs**:&#10;  - **AP Systems**: Video streaming, comments, likes (eventual consistency)&#10;  - **CP Systems**: User authentication, payment processing&#10;  - **CA Systems**: Single-region components with strong consistency&#10;&#10;### Implementation Strategy&#10;- **Multi-Region Deployment**: Handle network partitions&#10;- **Eventual Consistency**: Social features can tolerate temporary inconsistency&#10;- **Strong Consistency**: Critical operations like user authentication&#10;- **Conflict Resolution**: Last-writer-wins, vector clocks for concurrent updates&#10;&#10;## 7. Storage Architecture&#10;&#10;### Video Storage&#10;- **Object Storage**: S3/GCS for raw and processed video files&#10;- **CDN**: CloudFront/CloudFlare for global content delivery&#10;- **Storage Tiers**: Hot (recent), warm (popular), cold (archived)&#10;- **Compression**: AV1 codec for 30% bandwidth savings&#10;&#10;### Metadata Storage&#10;- **Relational Database**: PostgreSQL for structured data (users, videos)&#10;- **Document Database**: MongoDB for flexible schemas (comments, analytics)&#10;- **Graph Database**: Neo4j for social relationships and recommendations&#10;- **Cache Layer**: Redis for frequently accessed data&#10;&#10;### Search Index&#10;- **Elasticsearch**: Full-text search for videos, channels, playlists&#10;- **Vector Database**: Pinecone for ML-based video recommendations&#10;- **Real-time Indexing**: Stream processing for immediate search availability&#10;&#10;## 8. Video Processing Pipeline&#10;&#10;### Processing Stages&#10;1. **Ingestion**: Upload validation, virus scanning, metadata extraction&#10;2. **Transcoding**: Multiple resolutions, formats, and bitrates&#10;3. **AI Processing**: Content analysis, thumbnail generation, closed captions&#10;4. **Quality Check**: Automated quality assessment and optimization&#10;5. **Distribution**: CDN upload and cache warming&#10;&#10;### Technologies&#10;- **Message Queue**: Apache Kafka for pipeline orchestration&#10;- **Container Orchestration**: Kubernetes for scalable processing&#10;- **Workflow Engine**: Apache Airflow for complex processing workflows&#10;- **ML Platform**: TensorFlow Serving for content analysis&#10;&#10;## 9. Scaling Strategies for 10x Growth&#10;&#10;### Infrastructure Scaling&#10;- **Multi-Cloud**: AWS, GCP, Azure for redundancy and cost optimization&#10;- **Edge Computing**: Process videos closer to users&#10;- **Serverless**: Lambda/Cloud Functions for variable workloads&#10;- **Auto-scaling**: Predictive scaling based on usage patterns&#10;&#10;### Performance Optimization&#10;- **Caching Strategy**: &#10;  - L1: Browser cache (static content)&#10;  - L2: CDN cache (popular videos)&#10;  - L3: Application cache (metadata)&#10;  - L4: Database cache (query results)&#10;&#10;### Data Management&#10;- **Data Archiving**: Move old content to cheaper storage tiers&#10;- **Data Compression**: Advanced codecs and compression algorithms&#10;- **Smart Prefetching**: ML-based content prediction and caching&#10;- **Geographic Optimization**: Content placement based on user location&#10;&#10;## 10. Monitoring and Observability&#10;&#10;### Metrics&#10;- **Golden Signals**: Latency, traffic, errors, saturation&#10;- **Business Metrics**: Video start failures, buffering ratio, user engagement&#10;- **Infrastructure Metrics**: CPU, memory, network, storage utilization&#10;&#10;### Tools&#10;- **Monitoring**: Prometheus, Grafana, DataDog&#10;- **Logging**: ELK Stack (Elasticsearch, Logstash, Kibana)&#10;- **Tracing**: Jaeger, Zipkin for distributed tracing&#10;- **Alerting**: PagerDuty for incident management&#10;&#10;## 11. Security Considerations&#10;&#10;### Content Security&#10;- **DRM**: Widevine, FairPlay for premium content protection&#10;- **Content Filtering**: ML-based inappropriate content detection&#10;- **Access Control**: JWT tokens, OAuth 2.0, rate limiting&#10;&#10;### Infrastructure Security&#10;- **Network Security**: VPC, security groups, WAF&#10;- **Encryption**: TLS in transit, AES-256 at rest&#10;- **Secrets Management**: HashiCorp Vault, AWS Secrets Manager&#10;- **Compliance**: GDPR, COPPA, regional data protection laws&#10;&#10;## 12. Cost Optimization&#10;&#10;### Storage Optimization&#10;- **Intelligent Tiering**: Automatic movement between storage classes&#10;- **Deduplication**: Remove duplicate video segments&#10;- **Compression**: Advanced codecs (AV1, H.265) for bandwidth savings&#10;- **Regional Optimization**: Store content closer to primary audience&#10;&#10;### Compute Optimization&#10;- **Spot Instances**: Use for batch processing jobs&#10;- **Right-sizing**: ML-based instance size recommendations&#10;- **Reserved Capacity**: Long-term commitments for predictable workloads&#10;- **Serverless**: Pay-per-use for variable workloads&#10;&#10;## 13. Disaster Recovery and Business Continuity&#10;&#10;### Backup Strategy&#10;- **Multi-Region Replication**: Critical data replicated across regions&#10;- **Point-in-Time Recovery**: Database snapshots and transaction logs&#10;- **Content Backup**: Multiple copies of popular content&#10;&#10;### Recovery Procedures&#10;- **RTO (Recovery Time Objective)**: 15 minutes for critical services&#10;- **RPO (Recovery Point Objective)**: 5 minutes for user data&#10;- **Failover Automation**: Automated traffic rerouting during outages&#10;- **Chaos Engineering**: Regular disaster simulations&#10;&#10;## 14. Key Principles and Laws Applied&#10;&#10;### Performance Laws&#10;- **Little's Law**: Queue length = arrival rate × response time&#10;- **Amdahl's Law**: Parallel processing limitations&#10;- **Universal Scalability Law**: Overhead of coordination in distributed systems&#10;&#10;### Design Principles&#10;- **Single Responsibility**: Each service has one clear purpose&#10;- **Open/Closed**: Services open for extension, closed for modification&#10;- **Dependency Inversion**: Depend on abstractions, not concretions&#10;- **Fail Fast**: Immediate error detection and reporting&#10;&#10;### Reliability Patterns&#10;- **Bulkhead**: Isolate resources to prevent cascading failures&#10;- **Circuit Breaker**: Prevent calls to failing services&#10;- **Timeout**: Set maximum wait times for all operations&#10;- **Idempotency**: Safe to retry operations multiple times&#10;&#10;## 15. Database Design&#10;&#10;### User Service Database&#10;```sql&#10;-- Users table&#10;CREATE TABLE users (&#10;    user_id BIGINT PRIMARY KEY,&#10;    username VARCHAR(50) UNIQUE NOT NULL,&#10;    email VARCHAR(255) UNIQUE NOT NULL,&#10;    password_hash VARCHAR(255) NOT NULL,&#10;    created_at TIMESTAMP DEFAULT NOW(),&#10;    last_login TIMESTAMP&#10;);&#10;&#10;-- Channels table&#10;CREATE TABLE channels (&#10;    channel_id BIGINT PRIMARY KEY,&#10;    user_id BIGINT REFERENCES users(user_id),&#10;    channel_name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    subscriber_count BIGINT DEFAULT 0,&#10;    created_at TIMESTAMP DEFAULT NOW()&#10;);&#10;&#10;-- Subscriptions table (sharded by user_id)&#10;CREATE TABLE subscriptions (&#10;    subscription_id BIGINT PRIMARY KEY,&#10;    subscriber_id BIGINT REFERENCES users(user_id),&#10;    channel_id BIGINT REFERENCES channels(channel_id),&#10;    subscribed_at TIMESTAMP DEFAULT NOW(),&#10;    UNIQUE(subscriber_id, channel_id)&#10;);&#10;```&#10;&#10;### Video Service Database&#10;```sql&#10;-- Videos table (sharded by video_id hash)&#10;CREATE TABLE videos (&#10;    video_id BIGINT PRIMARY KEY,&#10;    channel_id BIGINT NOT NULL,&#10;    title VARCHAR(255) NOT NULL,&#10;    description TEXT,&#10;    duration INTEGER, -- in seconds&#10;    view_count BIGINT DEFAULT 0,&#10;    like_count BIGINT DEFAULT 0,&#10;    dislike_count BIGINT DEFAULT 0,&#10;    upload_time TIMESTAMP DEFAULT NOW(),&#10;    processing_status ENUM('uploading', 'processing', 'ready', 'failed'),&#10;    visibility ENUM('public', 'private', 'unlisted')&#10;);&#10;&#10;-- Video metadata table&#10;CREATE TABLE video_metadata (&#10;    video_id BIGINT PRIMARY KEY REFERENCES videos(video_id),&#10;    file_size BIGINT,&#10;    codec VARCHAR(50),&#10;    resolution VARCHAR(20),&#10;    bitrate INTEGER,&#10;    thumbnail_url VARCHAR(500),&#10;    tags TEXT[] -- PostgreSQL array for tags&#10;);&#10;&#10;-- Comments table (sharded by video_id)&#10;CREATE TABLE comments (&#10;    comment_id BIGINT PRIMARY KEY,&#10;    video_id BIGINT NOT NULL,&#10;    user_id BIGINT NOT NULL,&#10;    parent_comment_id BIGINT, -- for replies&#10;    content TEXT NOT NULL,&#10;    like_count INTEGER DEFAULT 0,&#10;    created_at TIMESTAMP DEFAULT NOW()&#10;);&#10;```&#10;&#10;## 16. API Design&#10;&#10;### REST API Endpoints&#10;&#10;#### Video Operations&#10;```http&#10;# Upload video&#10;POST /api/v1/videos&#10;Content-Type: multipart/form-data&#10;&#10;# Get video details&#10;GET /api/v1/videos/{videoId}&#10;&#10;# Update video metadata&#10;PUT /api/v1/videos/{videoId}&#10;&#10;# Delete video&#10;DELETE /api/v1/videos/{videoId}&#10;&#10;# Search videos&#10;GET /api/v1/videos/search?q={query}&amp;limit={limit}&amp;offset={offset}&#10;&#10;# Get trending videos&#10;GET /api/v1/videos/trending?category={category}&amp;region={region}&#10;```&#10;&#10;#### User Operations&#10;```http&#10;# User registration&#10;POST /api/v1/users/register&#10;&#10;# User login&#10;POST /api/v1/users/login&#10;&#10;# Get user profile&#10;GET /api/v1/users/{userId}&#10;&#10;# Subscribe to channel&#10;POST /api/v1/users/{userId}/subscriptions/{channelId}&#10;&#10;# Get user subscriptions&#10;GET /api/v1/users/{userId}/subscriptions&#10;```&#10;&#10;#### Social Operations&#10;```http&#10;# Like/Unlike video&#10;POST /api/v1/videos/{videoId}/like&#10;DELETE /api/v1/videos/{videoId}/like&#10;&#10;# Add comment&#10;POST /api/v1/videos/{videoId}/comments&#10;&#10;# Get comments&#10;GET /api/v1/videos/{videoId}/comments?limit={limit}&amp;offset={offset}&#10;&#10;# Reply to comment&#10;POST /api/v1/comments/{commentId}/replies&#10;```&#10;&#10;### GraphQL Schema (Alternative)&#10;```graphql&#10;type Video {&#10;  id: ID!&#10;  title: String!&#10;  description: String&#10;  duration: Int!&#10;  viewCount: Int!&#10;  likeCount: Int!&#10;  uploadTime: String!&#10;  channel: Channel!&#10;  comments(first: Int, after: String): CommentConnection&#10;}&#10;&#10;type Channel {&#10;  id: ID!&#10;  name: String!&#10;  subscriberCount: Int!&#10;  videos(first: Int, after: String): VideoConnection&#10;}&#10;&#10;type Query {&#10;  video(id: ID!): Video&#10;  searchVideos(query: String!, first: Int, after: String): VideoConnection&#10;  trendingVideos(category: String, region: String): [Video!]!&#10;}&#10;&#10;type Mutation {&#10;  uploadVideo(input: VideoInput!): Video&#10;  likeVideo(videoId: ID!): Video&#10;  addComment(videoId: ID!, content: String!): Comment&#10;}&#10;```&#10;&#10;## 17. Caching Strategy&#10;&#10;### Multi-Level Caching&#10;```yaml&#10;# Level 1: Browser Cache&#10;- Static assets: 1 year&#10;- Video thumbnails: 1 week&#10;- API responses: 5 minutes&#10;&#10;# Level 2: CDN Cache (CloudFlare/CloudFront)&#10;- Video segments: 1 day&#10;- Thumbnails: 1 week&#10;- API responses: 1 minute&#10;&#10;# Level 3: Application Cache (Redis)&#10;- Popular video metadata: 1 hour&#10;- User sessions: 24 hours&#10;- Search results: 15 minutes&#10;- Trending videos: 30 minutes&#10;&#10;# Level 4: Database Query Cache&#10;- Complex analytics queries: 5 minutes&#10;- User profile data: 30 minutes&#10;- Channel information: 1 hour&#10;```&#10;&#10;### Cache Invalidation Strategy&#10;- **Time-based**: TTL for most cached data&#10;- **Event-based**: Invalidate on video updates, user actions&#10;- **Version-based**: Cache keys include version numbers&#10;- **Write-through**: Update cache and database simultaneously&#10;- **Write-behind**: Async cache updates for non-critical data&#10;&#10;## 18. Message Queue Architecture&#10;&#10;### Kafka Topic Design&#10;```yaml&#10;# Video Processing Topics&#10;video-upload-events:&#10;  partitions: 100&#10;  replication-factor: 3&#10;  retention: 7 days&#10;&#10;video-transcoding-jobs:&#10;  partitions: 50&#10;  replication-factor: 3&#10;  retention: 3 days&#10;&#10;video-ready-events:&#10;  partitions: 100&#10;  replication-factor: 3&#10;  retention: 30 days&#10;&#10;# User Activity Topics&#10;user-view-events:&#10;  partitions: 200&#10;  replication-factor: 3&#10;  retention: 90 days&#10;&#10;user-interaction-events:&#10;  partitions: 100&#10;  replication-factor: 3&#10;  retention: 30 days&#10;&#10;# Notification Topics&#10;subscription-notifications:&#10;  partitions: 50&#10;  replication-factor: 3&#10;  retention: 7 days&#10;```&#10;&#10;### Event Schema (Avro)&#10;```json&#10;{&#10;  &quot;type&quot;: &quot;record&quot;,&#10;  &quot;name&quot;: &quot;VideoUploadEvent&quot;,&#10;  &quot;fields&quot;: [&#10;    {&quot;name&quot;: &quot;videoId&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;userId&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;channelId&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;filename&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;fileSize&quot;, &quot;type&quot;: &quot;long&quot;},&#10;    {&quot;name&quot;: &quot;contentType&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;uploadTimestamp&quot;, &quot;type&quot;: &quot;long&quot;},&#10;    {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;map&quot;, &quot;values&quot;: &quot;string&quot;}}&#10;  ]&#10;}&#10;```&#10;&#10;## 19. Load Balancing Strategy&#10;&#10;### Geographic Load Balancing&#10;```yaml&#10;# DNS-based routing&#10;Global Load Balancer:&#10;  - US-East: 40% traffic&#10;  - US-West: 20% traffic&#10;  - Europe: 25% traffic&#10;  - Asia-Pacific: 15% traffic&#10;&#10;# Regional Load Balancers&#10;Regional LB (L7):&#10;  - Path-based routing: /api/upload → Upload Service&#10;  - Header-based routing: User-Agent → Mobile/Web Service&#10;  - Weighted routing: Canary deployments&#10;&#10;# Service Load Balancers (L4)&#10;Service Discovery:&#10;  - Health checks every 30 seconds&#10;  - Circuit breaker: 5 failures in 60 seconds&#10;  - Load balancing algorithms: Weighted round-robin&#10;```&#10;&#10;### Auto-scaling Configuration&#10;```yaml&#10;# Horizontal Pod Autoscaler (Kubernetes)&#10;Video Upload Service:&#10;  minReplicas: 10&#10;  maxReplicas: 100&#10;  targetCPUUtilization: 70%&#10;  targetMemoryUtilization: 80%&#10;  scaleUpStabilization: 60s&#10;  scaleDownStabilization: 300s&#10;&#10;Video Streaming Service:&#10;  minReplicas: 50&#10;  maxReplicas: 500&#10;  targetCPUUtilization: 60%&#10;  customMetrics:&#10;    - concurrent_streams_per_pod: 1000&#10;```&#10;&#10;## 20. Monitoring and Alerting&#10;&#10;### Key Metrics Dashboard&#10;```yaml&#10;# Golden Signals&#10;Latency:&#10;  - Video start time: P50, P95, P99&#10;  - API response time: P50, P95, P99&#10;  - Upload processing time: P50, P95, P99&#10;&#10;Traffic:&#10;  - Requests per second by endpoint&#10;  - Concurrent video streams&#10;  - Upload requests per minute&#10;&#10;Errors:&#10;  - HTTP error rates (4xx, 5xx)&#10;  - Video processing failures&#10;  - Database connection errors&#10;&#10;Saturation:&#10;  - CPU utilization across services&#10;  - Memory usage patterns&#10;  - Queue depth in Kafka topics&#10;  - Storage utilization&#10;```&#10;&#10;### Alert Rules&#10;```yaml&#10;# Critical Alerts (PagerDuty)&#10;Video Start Failure Rate &gt; 1%:&#10;  severity: critical&#10;  notification: immediate&#10;&#10;API Error Rate &gt; 5%:&#10;  severity: critical&#10;  notification: immediate&#10;&#10;Database Connection Pool &gt; 90%:&#10;  severity: critical&#10;  notification: immediate&#10;&#10;# Warning Alerts (Slack)&#10;Upload Processing Time &gt; P95:&#10;  severity: warning&#10;  notification: 5-minute delay&#10;&#10;CDN Cache Hit Rate &lt; 85%:&#10;  severity: warning&#10;  notification: 10-minute delay&#10;```&#10;&#10;## Conclusion&#10;&#10;This comprehensive YouTube system design demonstrates how to architect a massive-scale video platform that can handle billions of users and petabytes of content. The design incorporates modern distributed systems principles, microservices architecture, event-driven patterns, and advanced scaling techniques.&#10;&#10;The 10x scaling strategy leverages the Scale Cube dimensions, applies CAP theorem principles strategically, and utilizes cutting-edge technologies to ensure the platform remains performant, reliable, and cost-effective as it grows. The architecture is designed to be resilient, observable, and maintainable while providing an excellent user experience globally." />
              <option name="updatedContent" value="+++&#10;date = '2025-05-03T12:44:47+10:00'&#10;draft = false&#10;title = 'Youtube System Design Interview'&#10;tags = ['Youtube', 'Interview']&#10;+++&#10;## 1. Requirements Gathering&#10;&#10;### Functional Requirements&#10;- **Video Upload**: Users can upload videos (multiple formats, sizes up to 10GB)&#10;- **Video Streaming**: Users can watch videos with adaptive bitrate streaming&#10;- **Video Search**: Search videos by title, description, tags, channel&#10;- **User Management**: Registration, authentication, profiles, subscriptions&#10;- **Social Features**: Comments, likes/dislikes, sharing, playlists&#10;- **Channel Management**: Create channels, manage content, analytics&#10;- **Content Moderation**: Automated and manual content review&#10;- **Notifications**: Subscription updates, comment replies, trending content&#10;&#10;### Non-Functional Requirements&#10;- **Scale**: 2B+ users, 500+ hours uploaded per minute, 1B+ hours watched daily&#10;- **Availability**: 99.9% uptime (CAP Theorem - prioritize Availability and Partition tolerance)&#10;- **Latency**: &#10;  - Video start time: &lt;2 seconds globally&#10;  - Search results: &lt;300ms&#10;  - Upload processing: Variable based on video size&#10;- **Consistency**: Eventually consistent for social features, strong consistency for user auth&#10;- **Storage**: Exabyte-scale video storage with global distribution&#10;- **Bandwidth**: Petabyte-scale daily traffic&#10;&#10;### Scale Estimation&#10;- **Users**: 2.7B monthly active users&#10;- **Videos**: 720,000 hours uploaded daily&#10;- **Storage**: 1PB+ new content daily&#10;- **Bandwidth**: 30PB+ daily egress traffic&#10;- **QPS**: 1M+ concurrent video streams&#10;&#10;## 2. High-Level Architecture&#10;&#10;```&#10;[CDN Layer] → [Load Balancers] → [API Gateway] → [Microservices]&#10;                                                      ↓&#10;[Message Queue] ← [Video Processing Pipeline] ← [Object Storage]&#10;                                                      ↓&#10;[Search Engine] ← [Metadata Services] → [Analytics Pipeline]&#10;```&#10;&#10;### Core Components&#10;1. **API Gateway** - Request routing, authentication, rate limiting&#10;2. **Video Upload Service** - Handle video ingestion and initial processing&#10;3. **Video Processing Pipeline** - Transcoding, thumbnail generation, ML analysis&#10;4. **Video Streaming Service** - Adaptive bitrate delivery&#10;5. **Metadata Service** - Video information, user data, social interactions&#10;6. **Search Service** - Video discovery and recommendation&#10;7. **User Service** - Authentication, profiles, subscriptions&#10;8. **Analytics Service** - View tracking, performance metrics&#10;9. **Notification Service** - Real-time updates and alerts&#10;&#10;## 2a. Microservice Decomposition &amp; Hexagonal Architecture (Chris Richardson)&#10;&#10;### Decomposition Strategies (from &quot;Microservices Patterns&quot;)&#10;- **By Business Capability**: Decompose services around business domains (e.g., Video Management, User Management, Social Interactions, Analytics).&#10;- **By Subdomain (DDD)**: Identify core, supporting, and generic subdomains (e.g., Video Processing as core, Notification as supporting).&#10;- **By Transaction Boundary**: Services should own their data and transactional boundaries (e.g., Video Upload and Processing as separate services).&#10;- **By Team Ownership**: Align services with team boundaries for independent delivery.&#10;&#10;### Hexagonal Architecture (Ports &amp; Adapters)&#10;- **Service Core**: Business logic is isolated from external systems.&#10;- **Ports**: Define interfaces for driving (API, UI) and driven (DB, messaging, external APIs) adapters.&#10;- **Adapters**: Implement ports for REST, gRPC, Kafka, databases, etc.&#10;- **Benefits**: Improves testability, flexibility, and separation of concerns.&#10;&#10;#### Example: Video Upload Service (Hexagonal)&#10;- **Core**: Handles upload validation, metadata extraction, and orchestration.&#10;- **Inbound Adapter**: REST API for receiving uploads.&#10;- **Outbound Adapters**: Kafka producer for events, S3 adapter for storage, DB adapter for metadata.&#10;&#10;### Additional Patterns from the Book&#10;- **API Composition**: Aggregate data from multiple services for UI.&#10;- **Database per Service**: Each service owns its schema.&#10;- **Saga Pattern**: Manage distributed transactions (e.g., video upload workflow).&#10;- **CQRS**: Separate read/write models for scalability.&#10;- **Event Sourcing**: Persist state changes as events for auditability.&#10;&#10;### References&#10;- Chris Richardson, &quot;Microservices Patterns&quot; (Manning)&#10;- https://microservices.io&#10;&#10;## 3. Scale Cube Application for 10x Growth&#10;&#10;### X-Axis Scaling (Horizontal Duplication)&#10;- **Load Balancers**: Deploy multiple tiers (L4/L7) with auto-scaling&#10;- **API Gateway Clusters**: Regional deployment with intelligent routing&#10;- **Microservice Replicas**: Auto-scaling based on CPU, memory, and queue depth&#10;- **Database Read Replicas**: Multiple read-only instances per region&#10;&#10;### Y-Axis Scaling (Functional Decomposition)&#10;- **Service Decomposition**:&#10;  - Upload Service → Video Ingestion + Metadata Extraction + Storage&#10;  - User Service → Auth + Profile + Subscription + Preferences&#10;  - Social Service → Comments + Likes + Sharing + Community&#10;- **Database Decomposition**: Separate DBs for videos, users, analytics, social&#10;- **Event-Driven Architecture**: Loose coupling via message queues&#10;&#10;### Z-Axis Scaling (Data Partitioning)&#10;- **Video Sharding**: By video ID hash, geographic region, or creator&#10;- **User Sharding**: By user ID hash or geographic region&#10;- **Temporal Sharding**: Hot data (recent) vs cold data (archived)&#10;- **Content-Based Sharding**: By video category, language, or popularity&#10;&#10;## 4. Microservices Design Patterns&#10;&#10;### Service Patterns&#10;- **API Gateway Pattern**: Single entry point with cross-cutting concerns&#10;- **Service Registry &amp; Discovery**: Consul/Eureka for service location&#10;- **Circuit Breaker**: Hystrix for fault tolerance and cascading failure prevention&#10;- **Bulkhead**: Resource isolation between services&#10;- **Retry with Exponential Backoff**: Resilient inter-service communication&#10;&#10;### Data Patterns&#10;- **Database per Service**: Each microservice owns its data&#10;- **Saga Pattern**: Distributed transactions for video upload workflow&#10;- **CQRS**: Separate read/write models for video metadata and analytics&#10;- **Event Sourcing**: Audit trail for user actions and video lifecycle&#10;&#10;### Communication Patterns&#10;- **Asynchronous Messaging**: Kafka for video processing pipeline&#10;- **Request-Response**: HTTP/gRPC for real-time user interactions&#10;- **Publish-Subscribe**: Event notifications for subscriptions&#10;- **Message Routing**: Content-based routing for different video types&#10;&#10;- **Hexagonal Architecture**: Each service is designed using ports and adapters, isolating business logic from infrastructure.&#10;- **Decomposition by Business Capability**: Services are split by domain, following DDD and team boundaries.&#10;- **Saga Pattern**: Used for workflows like video upload and processing.&#10;- **CQRS &amp; Event Sourcing**: Applied for scalability and auditability.&#10;&#10;## 5. Event-Driven Architecture (EDA)&#10;&#10;### Event Streaming Platform&#10;```&#10;Video Upload → [Event Producer] → [Kafka Topics] → [Event Consumers] → Processing Services&#10;```&#10;&#10;### Core Events&#10;- **VideoUploadedEvent**: Triggers transcoding pipeline&#10;- **VideoProcessedEvent**: Updates metadata and makes video available&#10;- **UserActionEvent**: Likes, comments, views for recommendation engine&#10;- **SubscriptionEvent**: Channel subscription/unsubscription&#10;- **ModerationEvent**: Content review results&#10;&#10;### Event Patterns&#10;- **Event Sourcing**: Store all state changes as events&#10;- **CQRS**: Separate command and query responsibility&#10;- **Event Choreography**: Services react to events autonomously&#10;- **Event Orchestration**: Central coordinator for complex workflows&#10;&#10;## 6. CAP Theorem Considerations&#10;&#10;### Design Decisions&#10;- **Partition Tolerance**: Always required in distributed system&#10;- **Availability vs Consistency Trade-offs**:&#10;  - **AP Systems**: Video streaming, comments, likes (eventual consistency)&#10;  - **CP Systems**: User authentication, payment processing&#10;  - **CA Systems**: Single-region components with strong consistency&#10;&#10;### Implementation Strategy&#10;- **Multi-Region Deployment**: Handle network partitions&#10;- **Eventual Consistency**: Social features can tolerate temporary inconsistency&#10;- **Strong Consistency**: Critical operations like user authentication&#10;- **Conflict Resolution**: Last-writer-wins, vector clocks for concurrent updates&#10;&#10;## 7. Storage Architecture&#10;&#10;### Video Storage&#10;- **Object Storage**: S3/GCS for raw and processed video files&#10;- **CDN**: CloudFront/CloudFlare for global content delivery&#10;- **Storage Tiers**: Hot (recent), warm (popular), cold (archived)&#10;- **Compression**: AV1 codec for 30% bandwidth savings&#10;&#10;### Metadata Storage&#10;- **Relational Database**: PostgreSQL for structured data (users, videos)&#10;- **Document Database**: MongoDB for flexible schemas (comments, analytics)&#10;- **Graph Database**: Neo4j for social relationships and recommendations&#10;- **Cache Layer**: Redis for frequently accessed data&#10;&#10;### Search Index&#10;- **Elasticsearch**: Full-text search for videos, channels, playlists&#10;- **Vector Database**: Pinecone for ML-based video recommendations&#10;- **Real-time Indexing**: Stream processing for immediate search availability&#10;&#10;## 8. Video Processing Pipeline&#10;&#10;### Processing Stages&#10;1. **Ingestion**: Upload validation, virus scanning, metadata extraction&#10;2. **Transcoding**: Multiple resolutions, formats, and bitrates&#10;3. **AI Processing**: Content analysis, thumbnail generation, closed captions&#10;4. **Quality Check**: Automated quality assessment and optimization&#10;5. **Distribution**: CDN upload and cache warming&#10;&#10;### Technologies&#10;- **Message Queue**: Apache Kafka for pipeline orchestration&#10;- **Container Orchestration**: Kubernetes for scalable processing&#10;- **Workflow Engine**: Apache Airflow for complex processing workflows&#10;- **ML Platform**: TensorFlow Serving for content analysis&#10;&#10;## 9. Scaling Strategies for 10x Growth&#10;&#10;### Infrastructure Scaling&#10;- **Multi-Cloud**: AWS, GCP, Azure for redundancy and cost optimization&#10;- **Edge Computing**: Process videos closer to users&#10;- **Serverless**: Lambda/Cloud Functions for variable workloads&#10;- **Auto-scaling**: Predictive scaling based on usage patterns&#10;&#10;### Performance Optimization&#10;- **Caching Strategy**: &#10;  - L1: Browser cache (static content)&#10;  - L2: CDN cache (popular videos)&#10;  - L3: Application cache (metadata)&#10;  - L4: Database cache (query results)&#10;&#10;### Data Management&#10;- **Data Archiving**: Move old content to cheaper storage tiers&#10;- **Data Compression**: Advanced codecs and compression algorithms&#10;- **Smart Prefetching**: ML-based content prediction and caching&#10;- **Geographic Optimization**: Content placement based on user location&#10;&#10;## 10. Monitoring and Observability&#10;&#10;### Metrics&#10;- **Golden Signals**: Latency, traffic, errors, saturation&#10;- **Business Metrics**: Video start failures, buffering ratio, user engagement&#10;- **Infrastructure Metrics**: CPU, memory, network, storage utilization&#10;&#10;### Tools&#10;- **Monitoring**: Prometheus, Grafana, DataDog&#10;- **Logging**: ELK Stack (Elasticsearch, Logstash, Kibana)&#10;- **Tracing**: Jaeger, Zipkin for distributed tracing&#10;- **Alerting**: PagerDuty for incident management&#10;&#10;## 11. Security Considerations&#10;&#10;### Content Security&#10;- **DRM**: Widevine, FairPlay for premium content protection&#10;- **Content Filtering**: ML-based inappropriate content detection&#10;- **Access Control**: JWT tokens, OAuth 2.0, rate limiting&#10;&#10;### Infrastructure Security&#10;- **Network Security**: VPC, security groups, WAF&#10;- **Encryption**: TLS in transit, AES-256 at rest&#10;- **Secrets Management**: HashiCorp Vault, AWS Secrets Manager&#10;- **Compliance**: GDPR, COPPA, regional data protection laws&#10;&#10;## 12. Cost Optimization&#10;&#10;### Storage Optimization&#10;- **Intelligent Tiering**: Automatic movement between storage classes&#10;- **Deduplication**: Remove duplicate video segments&#10;- **Compression**: Advanced codecs (AV1, H.265) for bandwidth savings&#10;- **Regional Optimization**: Store content closer to primary audience&#10;&#10;### Compute Optimization&#10;- **Spot Instances**: Use for batch processing jobs&#10;- **Right-sizing**: ML-based instance size recommendations&#10;- **Reserved Capacity**: Long-term commitments for predictable workloads&#10;- **Serverless**: Pay-per-use for variable workloads&#10;&#10;## 13. Disaster Recovery and Business Continuity&#10;&#10;### Backup Strategy&#10;- **Multi-Region Replication**: Critical data replicated across regions&#10;- **Point-in-Time Recovery**: Database snapshots and transaction logs&#10;- **Content Backup**: Multiple copies of popular content&#10;&#10;### Recovery Procedures&#10;- **RTO (Recovery Time Objective)**: 15 minutes for critical services&#10;- **RPO (Recovery Point Objective)**: 5 minutes for user data&#10;- **Failover Automation**: Automated traffic rerouting during outages&#10;- **Chaos Engineering**: Regular disaster simulations&#10;&#10;## 14. Key Principles and Laws Applied&#10;&#10;### Performance Laws&#10;- **Little's Law**: Queue length = arrival rate × response time&#10;- **Amdahl's Law**: Parallel processing limitations&#10;- **Universal Scalability Law**: Overhead of coordination in distributed systems&#10;&#10;### Design Principles&#10;- **Single Responsibility**: Each service has one clear purpose&#10;- **Open/Closed**: Services open for extension, closed for modification&#10;- **Dependency Inversion**: Depend on abstractions, not concretions&#10;- **Fail Fast**: Immediate error detection and reporting&#10;&#10;### Reliability Patterns&#10;- **Bulkhead**: Isolate resources to prevent cascading failures&#10;- **Circuit Breaker**: Prevent calls to failing services&#10;- **Timeout**: Set maximum wait times for all operations&#10;- **Idempotency**: Safe to retry operations multiple times&#10;&#10;### Additional Laws and Principles&#10;- **Murphy's Law**: &quot;Anything that can go wrong will go wrong.&quot; Design for failure and recovery.&#10;- **Conway's Law**: System design mirrors the communication structure of the organization.&#10;- **Occam's Razor**: Prefer the simplest solution that works.&#10;- **Robustness Principle (Postel's Law)**: &quot;Be conservative in what you send, be liberal in what you accept.&quot;&#10;- **Law of Demeter**: Minimize coupling by only interacting with immediate collaborators.&#10;- **Hofstadter's Law**: &quot;It always takes longer than you expect, even when you take into account Hofstadter's Law.&quot;&#10;- **Pareto Principle (80/20 Rule)**: 80% of effects come from 20% of causes; optimize for the critical path.&#10;- **Peter Principle**: In hierarchical organizations, people tend to be promoted to their level of incompetence (impacts team/org design).&#10;- **Gall's Law**: A complex system that works is invariably found to have evolved from a simple system that worked.&#10;&#10;## 15. Database Design&#10;&#10;### User Service Database&#10;```sql&#10;-- Users table&#10;CREATE TABLE users (&#10;    user_id BIGINT PRIMARY KEY,&#10;    username VARCHAR(50) UNIQUE NOT NULL,&#10;    email VARCHAR(255) UNIQUE NOT NULL,&#10;    password_hash VARCHAR(255) NOT NULL,&#10;    created_at TIMESTAMP DEFAULT NOW(),&#10;    last_login TIMESTAMP&#10;);&#10;&#10;-- Channels table&#10;CREATE TABLE channels (&#10;    channel_id BIGINT PRIMARY KEY,&#10;    user_id BIGINT REFERENCES users(user_id),&#10;    channel_name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    subscriber_count BIGINT DEFAULT 0,&#10;    created_at TIMESTAMP DEFAULT NOW()&#10;);&#10;&#10;-- Subscriptions table (sharded by user_id)&#10;CREATE TABLE subscriptions (&#10;    subscription_id BIGINT PRIMARY KEY,&#10;    subscriber_id BIGINT REFERENCES users(user_id),&#10;    channel_id BIGINT REFERENCES channels(channel_id),&#10;    subscribed_at TIMESTAMP DEFAULT NOW(),&#10;    UNIQUE(subscriber_id, channel_id)&#10;);&#10;```&#10;&#10;### Video Service Database&#10;```sql&#10;-- Videos table (sharded by video_id hash)&#10;CREATE TABLE videos (&#10;    video_id BIGINT PRIMARY KEY,&#10;    channel_id BIGINT NOT NULL,&#10;    title VARCHAR(255) NOT NULL,&#10;    description TEXT,&#10;    duration INTEGER, -- in seconds&#10;    view_count BIGINT DEFAULT 0,&#10;    like_count BIGINT DEFAULT 0,&#10;    dislike_count BIGINT DEFAULT 0,&#10;    upload_time TIMESTAMP DEFAULT NOW(),&#10;    processing_status ENUM('uploading', 'processing', 'ready', 'failed'),&#10;    visibility ENUM('public', 'private', 'unlisted')&#10;);&#10;&#10;-- Video metadata table&#10;CREATE TABLE video_metadata (&#10;    video_id BIGINT PRIMARY KEY REFERENCES videos(video_id),&#10;    file_size BIGINT,&#10;    codec VARCHAR(50),&#10;    resolution VARCHAR(20),&#10;    bitrate INTEGER,&#10;    thumbnail_url VARCHAR(500),&#10;    tags TEXT[] -- PostgreSQL array for tags&#10;);&#10;&#10;-- Comments table (sharded by video_id)&#10;CREATE TABLE comments (&#10;    comment_id BIGINT PRIMARY KEY,&#10;    video_id BIGINT NOT NULL,&#10;    user_id BIGINT NOT NULL,&#10;    parent_comment_id BIGINT, -- for replies&#10;    content TEXT NOT NULL,&#10;    like_count INTEGER DEFAULT 0,&#10;    created_at TIMESTAMP DEFAULT NOW()&#10;);&#10;```&#10;&#10;## 16. API Design&#10;&#10;### REST API Endpoints&#10;&#10;#### Video Operations&#10;```http&#10;# Upload video&#10;POST /api/v1/videos&#10;Content-Type: multipart/form-data&#10;&#10;# Get video details&#10;GET /api/v1/videos/{videoId}&#10;&#10;# Update video metadata&#10;PUT /api/v1/videos/{videoId}&#10;&#10;# Delete video&#10;DELETE /api/v1/videos/{videoId}&#10;&#10;# Search videos&#10;GET /api/v1/videos/search?q={query}&amp;limit={limit}&amp;offset={offset}&#10;&#10;# Get trending videos&#10;GET /api/v1/videos/trending?category={category}&amp;region={region}&#10;```&#10;&#10;#### User Operations&#10;```http&#10;# User registration&#10;POST /api/v1/users/register&#10;&#10;# User login&#10;POST /api/v1/users/login&#10;&#10;# Get user profile&#10;GET /api/v1/users/{userId}&#10;&#10;# Subscribe to channel&#10;POST /api/v1/users/{userId}/subscriptions/{channelId}&#10;&#10;# Get user subscriptions&#10;GET /api/v1/users/{userId}/subscriptions&#10;```&#10;&#10;#### Social Operations&#10;```http&#10;# Like/Unlike video&#10;POST /api/v1/videos/{videoId}/like&#10;DELETE /api/v1/videos/{videoId}/like&#10;&#10;# Add comment&#10;POST /api/v1/videos/{videoId}/comments&#10;&#10;# Get comments&#10;GET /api/v1/videos/{videoId}/comments?limit={limit}&amp;offset={offset}&#10;&#10;# Reply to comment&#10;POST /api/v1/comments/{commentId}/replies&#10;```&#10;&#10;### GraphQL Schema (Alternative)&#10;```graphql&#10;type Video {&#10;  id: ID!&#10;  title: String!&#10;  description: String&#10;  duration: Int!&#10;  viewCount: Int!&#10;  likeCount: Int!&#10;  uploadTime: String!&#10;  channel: Channel!&#10;  comments(first: Int, after: String): CommentConnection&#10;}&#10;&#10;type Channel {&#10;  id: ID!&#10;  name: String!&#10;  subscriberCount: Int!&#10;  videos(first: Int, after: String): VideoConnection&#10;}&#10;&#10;type Query {&#10;  video(id: ID!): Video&#10;  searchVideos(query: String!, first: Int, after: String): VideoConnection&#10;  trendingVideos(category: String, region: String): [Video!]!&#10;}&#10;&#10;type Mutation {&#10;  uploadVideo(input: VideoInput!): Video&#10;  likeVideo(videoId: ID!): Video&#10;  addComment(videoId: ID!, content: String!): Comment&#10;}&#10;```&#10;&#10;## 17. Caching Strategy&#10;&#10;### Multi-Level Caching&#10;```yaml&#10;# Level 1: Browser Cache&#10;- Static assets: 1 year&#10;- Video thumbnails: 1 week&#10;- API responses: 5 minutes&#10;&#10;# Level 2: CDN Cache (CloudFlare/CloudFront)&#10;- Video segments: 1 day&#10;- Thumbnails: 1 week&#10;- API responses: 1 minute&#10;&#10;# Level 3: Application Cache (Redis)&#10;- Popular video metadata: 1 hour&#10;- User sessions: 24 hours&#10;- Search results: 15 minutes&#10;- Trending videos: 30 minutes&#10;&#10;# Level 4: Database Query Cache&#10;- Complex analytics queries: 5 minutes&#10;- User profile data: 30 minutes&#10;- Channel information: 1 hour&#10;```&#10;&#10;### Cache Invalidation Strategy&#10;- **Time-based**: TTL for most cached data&#10;- **Event-based**: Invalidate on video updates, user actions&#10;- **Version-based**: Cache keys include version numbers&#10;- **Write-through**: Update cache and database simultaneously&#10;- **Write-behind**: Async cache updates for non-critical data&#10;&#10;## 18. Message Queue Architecture&#10;&#10;### Kafka Topic Design&#10;```yaml&#10;# Video Processing Topics&#10;video-upload-events:&#10;  partitions: 100&#10;  replication-factor: 3&#10;  retention: 7 days&#10;&#10;video-transcoding-jobs:&#10;  partitions: 50&#10;  replication-factor: 3&#10;  retention: 3 days&#10;&#10;video-ready-events:&#10;  partitions: 100&#10;  replication-factor: 3&#10;  retention: 30 days&#10;&#10;# User Activity Topics&#10;user-view-events:&#10;  partitions: 200&#10;  replication-factor: 3&#10;  retention: 90 days&#10;&#10;user-interaction-events:&#10;  partitions: 100&#10;  replication-factor: 3&#10;  retention: 30 days&#10;&#10;# Notification Topics&#10;subscription-notifications:&#10;  partitions: 50&#10;  replication-factor: 3&#10;  retention: 7 days&#10;```&#10;&#10;### Event Schema (Avro)&#10;```json&#10;{&#10;  &quot;type&quot;: &quot;record&quot;,&#10;  &quot;name&quot;: &quot;VideoUploadEvent&quot;,&#10;  &quot;fields&quot;: [&#10;    {&quot;name&quot;: &quot;videoId&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;userId&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;channelId&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;filename&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;fileSize&quot;, &quot;type&quot;: &quot;long&quot;},&#10;    {&quot;name&quot;: &quot;contentType&quot;, &quot;type&quot;: &quot;string&quot;},&#10;    {&quot;name&quot;: &quot;uploadTimestamp&quot;, &quot;type&quot;: &quot;long&quot;},&#10;    {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;map&quot;, &quot;values&quot;: &quot;string&quot;}}&#10;  ]&#10;}&#10;```&#10;&#10;## 19. Load Balancing Strategy&#10;&#10;### Geographic Load Balancing&#10;```yaml&#10;# DNS-based routing&#10;Global Load Balancer:&#10;  - US-East: 40% traffic&#10;  - US-West: 20% traffic&#10;  - Europe: 25% traffic&#10;  - Asia-Pacific: 15% traffic&#10;&#10;# Regional Load Balancers&#10;Regional LB (L7):&#10;  - Path-based routing: /api/upload → Upload Service&#10;  - Header-based routing: User-Agent → Mobile/Web Service&#10;  - Weighted routing: Canary deployments&#10;&#10;# Service Load Balancers (L4)&#10;Service Discovery:&#10;  - Health checks every 30 seconds&#10;  - Circuit breaker: 5 failures in 60 seconds&#10;  - Load balancing algorithms: Weighted round-robin&#10;```&#10;&#10;### Auto-scaling Configuration&#10;```yaml&#10;# Horizontal Pod Autoscaler (Kubernetes)&#10;Video Upload Service:&#10;  minReplicas: 10&#10;  maxReplicas: 100&#10;  targetCPUUtilization: 70%&#10;  targetMemoryUtilization: 80%&#10;  scaleUpStabilization: 60s&#10;  scaleDownStabilization: 300s&#10;&#10;Video Streaming Service:&#10;  minReplicas: 50&#10;  maxReplicas: 500&#10;  targetCPUUtilization: 60%&#10;  customMetrics:&#10;    - concurrent_streams_per_pod: 1000&#10;```&#10;&#10;## 20. Monitoring and Alerting&#10;&#10;### Key Metrics Dashboard&#10;```yaml&#10;# Golden Signals&#10;Latency:&#10;  - Video start time: P50, P95, P99&#10;  - API response time: P50, P95, P99&#10;  - Upload processing time: P50, P95, P99&#10;&#10;Traffic:&#10;  - Requests per second by endpoint&#10;  - Concurrent video streams&#10;  - Upload requests per minute&#10;&#10;Errors:&#10;  - HTTP error rates (4xx, 5xx)&#10;  - Video processing failures&#10;  - Database connection errors&#10;&#10;Saturation:&#10;  - CPU utilization across services&#10;  - Memory usage patterns&#10;  - Queue depth in Kafka topics&#10;  - Storage utilization&#10;```&#10;&#10;### Alert Rules&#10;```yaml&#10;# Critical Alerts (PagerDuty)&#10;Video Start Failure Rate &gt; 1%:&#10;  severity: critical&#10;  notification: immediate&#10;&#10;API Error Rate &gt; 5%:&#10;  severity: critical&#10;  notification: immediate&#10;&#10;Database Connection Pool &gt; 90%:&#10;  severity: critical&#10;  notification: immediate&#10;&#10;# Warning Alerts (Slack)&#10;Upload Processing Time &gt; P95:&#10;  severity: warning&#10;  notification: 5-minute delay&#10;&#10;CDN Cache Hit Rate &lt; 85%:&#10;  severity: warning&#10;  notification: 10-minute delay&#10;```&#10;&#10;## Conclusion&#10;&#10;This comprehensive YouTube system design demonstrates how to architect a massive-scale video platform that can handle billions of users and petabytes of content. The design incorporates modern distributed systems principles, microservices architecture, event-driven patterns, and advanced scaling techniques.&#10;&#10;The 10x scaling strategy leverages the Scale Cube dimensions, applies CAP theorem principles strategically, and utilizes cutting-edge technologies to ensure the platform remains performant, reliable, and cost-effective as it grows. The architecture is designed to be resilient, observable, and maintainable while providing an excellent user experience globally." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>